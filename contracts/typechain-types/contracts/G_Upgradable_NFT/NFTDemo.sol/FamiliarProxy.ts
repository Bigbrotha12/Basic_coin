/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface FamiliarProxyInterface extends utils.Interface {
  functions: {
    "changeAdmin(address)": FunctionFragment;
    "changeRouting(address,address)": FunctionFragment;
    "getRouting(address)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "renounceAdmin()": FunctionFragment;
    "upgradeInit(address,bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeAdmin"
      | "changeRouting"
      | "getRouting"
      | "getVersion"
      | "renounceAdmin"
      | "upgradeInit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRouting",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeInit",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRouting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeInit",
    data: BytesLike
  ): Result;

  events: {
    "adminChanged(address,address)": EventFragment;
    "contractUpgraded(string,address)": EventFragment;
    "currentRouting(address,address)": EventFragment;
    "currentVersion(string,address)": EventFragment;
    "routingUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "adminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "contractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "currentRouting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "currentVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "routingUpdated"): EventFragment;
}

export interface adminChangedEventObject {
  prevAdmin: string;
  newAdmin: string;
}
export type adminChangedEvent = TypedEvent<
  [string, string],
  adminChangedEventObject
>;

export type adminChangedEventFilter = TypedEventFilter<adminChangedEvent>;

export interface contractUpgradedEventObject {
  version: string;
  target: string;
}
export type contractUpgradedEvent = TypedEvent<
  [string, string],
  contractUpgradedEventObject
>;

export type contractUpgradedEventFilter =
  TypedEventFilter<contractUpgradedEvent>;

export interface currentRoutingEventObject {
  role: string;
  target: string;
}
export type currentRoutingEvent = TypedEvent<
  [string, string],
  currentRoutingEventObject
>;

export type currentRoutingEventFilter = TypedEventFilter<currentRoutingEvent>;

export interface currentVersionEventObject {
  version: string;
  target: string;
}
export type currentVersionEvent = TypedEvent<
  [string, string],
  currentVersionEventObject
>;

export type currentVersionEventFilter = TypedEventFilter<currentVersionEvent>;

export interface routingUpdatedEventObject {
  role: string;
  target: string;
}
export type routingUpdatedEvent = TypedEvent<
  [string, string],
  routingUpdatedEventObject
>;

export type routingUpdatedEventFilter = TypedEventFilter<routingUpdatedEvent>;

export interface FamiliarProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FamiliarProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeRouting(
      _role: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRouting(
      _role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVersion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeInit(
      _impl: PromiseOrValue<string>,
      _initData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  changeAdmin(
    _newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeRouting(
    _role: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRouting(
    _role: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVersion(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeInit(
    _impl: PromiseOrValue<string>,
    _initData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRouting(
      _role: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRouting(
      _role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getVersion(overrides?: CallOverrides): Promise<void>;

    renounceAdmin(overrides?: CallOverrides): Promise<void>;

    upgradeInit(
      _impl: PromiseOrValue<string>,
      _initData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "adminChanged(address,address)"(
      prevAdmin?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): adminChangedEventFilter;
    adminChanged(
      prevAdmin?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): adminChangedEventFilter;

    "contractUpgraded(string,address)"(
      version?: PromiseOrValue<string> | null,
      target?: null
    ): contractUpgradedEventFilter;
    contractUpgraded(
      version?: PromiseOrValue<string> | null,
      target?: null
    ): contractUpgradedEventFilter;

    "currentRouting(address,address)"(
      role?: null,
      target?: null
    ): currentRoutingEventFilter;
    currentRouting(role?: null, target?: null): currentRoutingEventFilter;

    "currentVersion(string,address)"(
      version?: PromiseOrValue<string> | null,
      target?: null
    ): currentVersionEventFilter;
    currentVersion(
      version?: PromiseOrValue<string> | null,
      target?: null
    ): currentVersionEventFilter;

    "routingUpdated(address,address)"(
      role?: PromiseOrValue<string> | null,
      target?: null
    ): routingUpdatedEventFilter;
    routingUpdated(
      role?: PromiseOrValue<string> | null,
      target?: null
    ): routingUpdatedEventFilter;
  };

  estimateGas: {
    changeAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeRouting(
      _role: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRouting(
      _role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVersion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeInit(
      _impl: PromiseOrValue<string>,
      _initData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeRouting(
      _role: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRouting(
      _role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVersion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeInit(
      _impl: PromiseOrValue<string>,
      _initData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
