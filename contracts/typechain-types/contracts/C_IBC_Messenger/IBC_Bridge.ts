/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IBC_BridgeInterface extends utils.Interface {
  functions: {
    "Demo()": FunctionFragment;
    "MESSAGE_TYPE_HASH()": FunctionFragment;
    "MINTER()": FunctionFragment;
    "buildDomainHash(bytes32,bytes32,uint256,address)": FunctionFragment;
    "buildStructHash(address,uint256,uint256,uint256)": FunctionFragment;
    "changeDomain(string,string,uint256,address)": FunctionFragment;
    "dataReceive(address,uint256,uint256,bytes)": FunctionFragment;
    "dataSend(address,uint256,uint256)": FunctionFragment;
    "getAddress()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getCurrentDomainHash()": FunctionFragment;
    "getDomainHash(uint256)": FunctionFragment;
    "getName()": FunctionFragment;
    "getPrefixedDataHash(bytes32)": FunctionFragment;
    "getTypedDataHash(bytes32)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "name()": FunctionFragment;
    "nonce(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerDomain(string,string,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validDomainHash(uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Demo"
      | "MESSAGE_TYPE_HASH"
      | "MINTER"
      | "buildDomainHash"
      | "buildStructHash"
      | "changeDomain"
      | "dataReceive"
      | "dataSend"
      | "getAddress"
      | "getChainId"
      | "getCurrentDomainHash"
      | "getDomainHash"
      | "getName"
      | "getPrefixedDataHash"
      | "getTypedDataHash"
      | "getVersion"
      | "name"
      | "nonce"
      | "owner"
      | "registerDomain"
      | "renounceOwnership"
      | "setToken"
      | "transferOwnership"
      | "validDomainHash"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Demo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MESSAGE_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MINTER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buildDomainHash",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buildStructHash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDomain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dataReceive",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dataSend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDomainHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPrefixedDataHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedDataHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonce",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDomain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validDomainHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Demo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MESSAGE_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MINTER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buildDomainHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDomainHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrefixedDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validDomainHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "DataReceived(address,uint256,uint256,uint256)": EventFragment;
    "DataSent(address,uint256,uint256,uint256,bytes32)": EventFragment;
    "DomainChanged(string,string,uint256,address)": EventFragment;
    "DomainRegistered(string,string,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface DataReceivedEventObject {
  receiver: string;
  tokenId: BigNumber;
  sendingChainId: BigNumber;
  nonce: BigNumber;
}
export type DataReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DataReceivedEventObject
>;

export type DataReceivedEventFilter = TypedEventFilter<DataReceivedEvent>;

export interface DataSentEventObject {
  receiver: string;
  tokenId: BigNumber;
  receivingChainId: BigNumber;
  nonce: BigNumber;
  domainSeparator: string;
}
export type DataSentEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  DataSentEventObject
>;

export type DataSentEventFilter = TypedEventFilter<DataSentEvent>;

export interface DomainChangedEventObject {
  name: string;
  version: string;
  chainId: BigNumber;
  targetContract: string;
}
export type DomainChangedEvent = TypedEvent<
  [string, string, BigNumber, string],
  DomainChangedEventObject
>;

export type DomainChangedEventFilter = TypedEventFilter<DomainChangedEvent>;

export interface DomainRegisteredEventObject {
  name: string;
  version: string;
  chainId: BigNumber;
  targetContract: string;
}
export type DomainRegisteredEvent = TypedEvent<
  [string, string, BigNumber, string],
  DomainRegisteredEventObject
>;

export type DomainRegisteredEventFilter =
  TypedEventFilter<DomainRegisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface IBC_Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBC_BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Demo(overrides?: CallOverrides): Promise<[string]>;

    MESSAGE_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    MINTER(overrides?: CallOverrides): Promise<[string]>;

    buildDomainHash(
      _name: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BytesLike>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    buildStructHash(
      _receiver: PromiseOrValue<string>,
      _receivingChainId: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    changeDomain(
      _name: PromiseOrValue<string>,
      _version: PromiseOrValue<string>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataReceive(
      _receiver: PromiseOrValue<string>,
      _sendingChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataSend(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receivingChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddress(overrides?: CallOverrides): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentDomainHash(overrides?: CallOverrides): Promise<[string]>;

    getDomainHash(
      _chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getPrefixedDataHash(
      _structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTypedDataHash(
      _structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVersion(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonce(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerDomain(
      _name: PromiseOrValue<string>,
      _version: PromiseOrValue<string>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validDomainHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  Demo(overrides?: CallOverrides): Promise<string>;

  MESSAGE_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  MINTER(overrides?: CallOverrides): Promise<string>;

  buildDomainHash(
    _name: PromiseOrValue<BytesLike>,
    _version: PromiseOrValue<BytesLike>,
    _chainId: PromiseOrValue<BigNumberish>,
    _verifier: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  buildStructHash(
    _receiver: PromiseOrValue<string>,
    _receivingChainId: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  changeDomain(
    _name: PromiseOrValue<string>,
    _version: PromiseOrValue<string>,
    _chainId: PromiseOrValue<BigNumberish>,
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataReceive(
    _receiver: PromiseOrValue<string>,
    _sendingChainId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataSend(
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _receivingChainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddress(overrides?: CallOverrides): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentDomainHash(overrides?: CallOverrides): Promise<string>;

  getDomainHash(
    _chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getName(overrides?: CallOverrides): Promise<string>;

  getPrefixedDataHash(
    _structHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTypedDataHash(
    _structHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVersion(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nonce(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerDomain(
    _name: PromiseOrValue<string>,
    _version: PromiseOrValue<string>,
    _chainId: PromiseOrValue<BigNumberish>,
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validDomainHash(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Demo(overrides?: CallOverrides): Promise<string>;

    MESSAGE_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    MINTER(overrides?: CallOverrides): Promise<string>;

    buildDomainHash(
      _name: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BytesLike>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    buildStructHash(
      _receiver: PromiseOrValue<string>,
      _receivingChainId: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    changeDomain(
      _name: PromiseOrValue<string>,
      _version: PromiseOrValue<string>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dataReceive(
      _receiver: PromiseOrValue<string>,
      _sendingChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dataSend(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receivingChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAddress(overrides?: CallOverrides): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDomainHash(overrides?: CallOverrides): Promise<string>;

    getDomainHash(
      _chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    getPrefixedDataHash(
      _structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTypedDataHash(
      _structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVersion(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nonce(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerDomain(
      _name: PromiseOrValue<string>,
      _version: PromiseOrValue<string>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validDomainHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DataReceived(address,uint256,uint256,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      tokenId?: null,
      sendingChainId?: null,
      nonce?: null
    ): DataReceivedEventFilter;
    DataReceived(
      receiver?: PromiseOrValue<string> | null,
      tokenId?: null,
      sendingChainId?: null,
      nonce?: null
    ): DataReceivedEventFilter;

    "DataSent(address,uint256,uint256,uint256,bytes32)"(
      receiver?: PromiseOrValue<string> | null,
      tokenId?: null,
      receivingChainId?: null,
      nonce?: null,
      domainSeparator?: null
    ): DataSentEventFilter;
    DataSent(
      receiver?: PromiseOrValue<string> | null,
      tokenId?: null,
      receivingChainId?: null,
      nonce?: null,
      domainSeparator?: null
    ): DataSentEventFilter;

    "DomainChanged(string,string,uint256,address)"(
      name?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<string> | null,
      chainId?: null,
      targetContract?: null
    ): DomainChangedEventFilter;
    DomainChanged(
      name?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<string> | null,
      chainId?: null,
      targetContract?: null
    ): DomainChangedEventFilter;

    "DomainRegistered(string,string,uint256,address)"(
      name?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<string> | null,
      chainId?: null,
      targetContract?: null
    ): DomainRegisteredEventFilter;
    DomainRegistered(
      name?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<string> | null,
      chainId?: null,
      targetContract?: null
    ): DomainRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    Demo(overrides?: CallOverrides): Promise<BigNumber>;

    MESSAGE_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER(overrides?: CallOverrides): Promise<BigNumber>;

    buildDomainHash(
      _name: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BytesLike>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buildStructHash(
      _receiver: PromiseOrValue<string>,
      _receivingChainId: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeDomain(
      _name: PromiseOrValue<string>,
      _version: PromiseOrValue<string>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataReceive(
      _receiver: PromiseOrValue<string>,
      _sendingChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataSend(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receivingChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDomainHash(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainHash(
      _chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getPrefixedDataHash(
      _structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypedDataHash(
      _structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerDomain(
      _name: PromiseOrValue<string>,
      _version: PromiseOrValue<string>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validDomainHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Demo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MESSAGE_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buildDomainHash(
      _name: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BytesLike>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildStructHash(
      _receiver: PromiseOrValue<string>,
      _receivingChainId: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeDomain(
      _name: PromiseOrValue<string>,
      _version: PromiseOrValue<string>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataReceive(
      _receiver: PromiseOrValue<string>,
      _sendingChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataSend(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receivingChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentDomainHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainHash(
      _chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrefixedDataHash(
      _structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypedDataHash(
      _structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerDomain(
      _name: PromiseOrValue<string>,
      _version: PromiseOrValue<string>,
      _chainId: PromiseOrValue<BigNumberish>,
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validDomainHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
