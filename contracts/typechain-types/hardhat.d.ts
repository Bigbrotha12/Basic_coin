/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "VRFCoordinatorV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFCoordinatorV2Interface__factory>;
    getContractFactory(
      name: "VRFConsumerBaseV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFConsumerBaseV2__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "DemoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DemoToken__factory>;
    getContractFactory(
      name: "AirdropClaim",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropClaim__factory>;
    getContractFactory(
      name: "AirdropDemo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropDemo__factory>;
    getContractFactory(
      name: "AirdropToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropToken__factory>;
    getContractFactory(
      name: "EIP712X",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712X__factory>;
    getContractFactory(
      name: "IBC_Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBC_Bridge__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "TestNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestNFT__factory>;
    getContractFactory(
      name: "CoinFlipper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoinFlipper__factory>;
    getContractFactory(
      name: "TestCoordinator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCoordinator__factory>;
    getContractFactory(
      name: "VRFConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFConsumerBase__factory>;
    getContractFactory(
      name: "ReflectToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReflectToken__factory>;
    getContractFactory(
      name: "RewardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardToken__factory>;
    getContractFactory(
      name: "StakeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeToken__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "ERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2981__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "FamiliarAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FamiliarAdmin__factory>;
    getContractFactory(
      name: "FamiliarIMX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FamiliarIMX__factory>;
    getContractFactory(
      name: "FamiliarLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FamiliarLogic__factory>;
    getContractFactory(
      name: "FamiliarProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FamiliarProxy__factory>;
    getContractFactory(
      name: "IInitializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializable__factory>;
    getContractFactory(
      name: "IMintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintable__factory>;
    getContractFactory(
      name: "Registration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registration__factory>;
    getContractFactory(
      name: "IMX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMX__factory>;
    getContractFactory(
      name: "Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mintable__factory>;

    getContractAt(
      name: "VRFCoordinatorV2Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFCoordinatorV2Interface>;
    getContractAt(
      name: "VRFConsumerBaseV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFConsumerBaseV2>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC2981",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "DemoToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DemoToken>;
    getContractAt(
      name: "AirdropClaim",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropClaim>;
    getContractAt(
      name: "AirdropDemo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropDemo>;
    getContractAt(
      name: "AirdropToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropToken>;
    getContractAt(
      name: "EIP712X",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712X>;
    getContractAt(
      name: "IBC_Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBC_Bridge>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "TestNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestNFT>;
    getContractAt(
      name: "CoinFlipper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoinFlipper>;
    getContractAt(
      name: "TestCoordinator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCoordinator>;
    getContractAt(
      name: "VRFConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFConsumerBase>;
    getContractAt(
      name: "ReflectToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReflectToken>;
    getContractAt(
      name: "RewardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardToken>;
    getContractAt(
      name: "StakeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeToken>;
    getContractAt(
      name: "Staking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "ERC2981",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2981>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "FamiliarAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FamiliarAdmin>;
    getContractAt(
      name: "FamiliarIMX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FamiliarIMX>;
    getContractAt(
      name: "FamiliarLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FamiliarLogic>;
    getContractAt(
      name: "FamiliarProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FamiliarProxy>;
    getContractAt(
      name: "IInitializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitializable>;
    getContractAt(
      name: "IMintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMintable>;
    getContractAt(
      name: "Registration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Registration>;
    getContractAt(
      name: "IMX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMX>;
    getContractAt(
      name: "Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mintable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
