/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DemoToken,
  DemoTokenInterface,
} from "../../../contracts/A_DemoToken/DemoToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "_whitelist",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_limit",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_active",
        type: "bool",
      },
    ],
    name: "changeMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_requester",
        type: "address",
      },
    ],
    name: "isMinter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mintLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011e7380380620011e78339810160408190526200003491620001bd565b8383600362000044838262000369565b50600462000053828262000369565b5050600580546001600160a01b0319163317905550600781905560005b8251811015620000dc5760016006600085848151811062000095576200009562000435565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000d3816200044b565b91505062000070565b505050505062000473565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001285762000128620000e7565b604052919050565b600082601f8301126200014257600080fd5b81516001600160401b038111156200015e576200015e620000e7565b602062000174601f8301601f19168201620000fd565b82815285828487010111156200018957600080fd5b60005b83811015620001a95785810183015182820184015282016200018c565b506000928101909101919091529392505050565b60008060008060808587031215620001d457600080fd5b84516001600160401b0380821115620001ec57600080fd5b620001fa8883890162000130565b95506020915081870151818111156200021257600080fd5b6200022089828a0162000130565b9550506040870151818111156200023657600080fd5b8701601f810189136200024857600080fd5b8051828111156200025d576200025d620000e7565b8060051b925062000270848401620000fd565b818152928201840192848101908b8511156200028b57600080fd5b928501925b84841015620002c557835192506001600160a01b0383168314620002b45760008081fd5b828252928501929085019062000290565b60609a909a0151989b979a5050505050505050565b600181811c90821680620002ef57607f821691505b6020821081036200031057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200036457600081815260208120601f850160051c810160208610156200033f5750805b601f850160051c820191505b8181101562000360578281556001016200034b565b5050505b505050565b81516001600160401b03811115620003855762000385620000e7565b6200039d81620003968454620002da565b8462000316565b602080601f831160018114620003d55760008415620003bc5750858301515b600019600386901b1c1916600185901b17855562000360565b600085815260208120601f198616915b828110156200040657888601518255948401946001909101908401620003e5565b5085821015620004255787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000600182016200046c57634e487b7160e01b600052601160045260246000fd5b5060010190565b610d6480620004836000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806379cc6790116100a25780639b19251a116100715780639b19251a14610243578063a457c2d714610266578063a9059cbb14610279578063aa271e1a1461028c578063dd62ed3e146102b857600080fd5b806379cc6790146101f45780638da5cb5b1461020757806395d89b4114610232578063996517cf1461023a57600080fd5b806323b872dd116100e957806323b872dd14610183578063313ce5671461019657806339509351146101a5578063449a52f8146101b857806370a08231146101cb57600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c5780631d56c6091461016e575b600080fd5b6101236102cb565b6040516101309190610b72565b60405180910390f35b61014c610147366004610bdc565b61035d565b6040519015158152602001610130565b6002545b604051908152602001610130565b61018161017c366004610c06565b610377565b005b61014c610191366004610c42565b610401565b60405160128152602001610130565b61014c6101b3366004610bdc565b610425565b6101816101c6366004610bdc565b610447565b6101606101d9366004610c7e565b6001600160a01b031660009081526020819052604090205490565b610181610202366004610bdc565b61051a565b60055461021a906001600160a01b031681565b6040516001600160a01b039091168152602001610130565b610123610583565b61016060075481565b61014c610251366004610c7e565b60066020526000908152604090205460ff1681565b61014c610274366004610bdc565b610592565b61014c610287366004610bdc565b61060d565b61014c61029a366004610c7e565b6001600160a01b031660009081526006602052604090205460ff1690565b6101606102c6366004610ca0565b61061b565b6060600380546102da90610cd3565b80601f016020809104026020016040519081016040528092919081815260200182805461030690610cd3565b80156103535780601f1061032857610100808354040283529160200191610353565b820191906000526020600020905b81548152906001019060200180831161033657829003601f168201915b5050505050905090565b60003361036b818585610646565b60019150505b92915050565b6005546001600160a01b031633146103d65760405162461bcd60e51b815260206004820152601860248201527f44656d6f546f6b656e3a20556e617574686f72697a65642e000000000000000060448201526064015b60405180910390fd5b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b60003361040f85828561076b565b61041a8585856107e5565b506001949350505050565b60003361036b818585610438838361061b565b6104429190610d0d565b610646565b3360009081526006602052604090205460ff166104a65760405162461bcd60e51b815260206004820152601d60248201527f44656d6f546f6b656e3a20556e617574686f72697a6564204d696e742e00000060448201526064016103cd565b60075481111561050c5760405162461bcd60e51b815260206004820152602b60248201527f44656d6f546f6b656e3a204d696e7420616d6f756e74206f766572207065722d60448201526a36b4b73a103634b6b4ba1760a91b60648201526084016103cd565b6105168282610989565b5050565b3360009081526006602052604090205460ff166105795760405162461bcd60e51b815260206004820152601d60248201527f44656d6f546f6b656e3a20556e617574686f72697a6564204275726e2e00000060448201526064016103cd565b6105168282610a48565b6060600480546102da90610cd3565b600033816105a0828661061b565b9050838110156106005760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103cd565b61041a8286868403610646565b60003361036b8185856107e5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166106a85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103cd565b6001600160a01b0382166107095760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103cd565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610777848461061b565b905060001981146107df57818110156107d25760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103cd565b6107df8484848403610646565b50505050565b6001600160a01b0383166108495760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103cd565b6001600160a01b0382166108ab5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103cd565b6001600160a01b038316600090815260208190526040902054818110156109235760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103cd565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36107df565b6001600160a01b0382166109df5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103cd565b80600260008282546109f19190610d0d565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216610aa85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103cd565b6001600160a01b03821660009081526020819052604090205481811015610b1c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103cd565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910161075e565b600060208083528351808285015260005b81811015610b9f57858101830151858201604001528201610b83565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610bd757600080fd5b919050565b60008060408385031215610bef57600080fd5b610bf883610bc0565b946020939093013593505050565b60008060408385031215610c1957600080fd5b610c2283610bc0565b915060208301358015158114610c3757600080fd5b809150509250929050565b600080600060608486031215610c5757600080fd5b610c6084610bc0565b9250610c6e60208501610bc0565b9150604084013590509250925092565b600060208284031215610c9057600080fd5b610c9982610bc0565b9392505050565b60008060408385031215610cb357600080fd5b610cbc83610bc0565b9150610cca60208401610bc0565b90509250929050565b600181811c90821680610ce757607f821691505b602082108103610d0757634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561037157634e487b7160e01b600052601160045260246000fdfea264697066735822122047474bbe9413b52ac3701ce24e254fec2d745f2da1f8e25e1b004d39d182f94f64736f6c63430008110033";

type DemoTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DemoTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DemoToken__factory extends ContractFactory {
  constructor(...args: DemoTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _whitelist: PromiseOrValue<string>[],
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DemoToken> {
    return super.deploy(
      _name,
      _symbol,
      _whitelist,
      _limit,
      overrides || {}
    ) as Promise<DemoToken>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _whitelist: PromiseOrValue<string>[],
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _whitelist,
      _limit,
      overrides || {}
    );
  }
  override attach(address: string): DemoToken {
    return super.attach(address) as DemoToken;
  }
  override connect(signer: Signer): DemoToken__factory {
    return super.connect(signer) as DemoToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DemoTokenInterface {
    return new utils.Interface(_abi) as DemoTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DemoToken {
    return new Contract(address, _abi, signerOrProvider) as DemoToken;
  }
}
