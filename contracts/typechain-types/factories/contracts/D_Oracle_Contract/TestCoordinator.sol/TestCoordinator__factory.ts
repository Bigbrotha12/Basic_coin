/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestCoordinator,
  TestCoordinatorInterface,
} from "../../../../contracts/D_Oracle_Contract/TestCoordinator.sol/TestCoordinator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_queryId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_desiredResult",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
    ],
    name: "answerTestQuery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subId",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "minimumRequestConfirmations",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "result",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610310806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633c5940591461004657806350ed42751461006b5780635d3b1d3014610080575b600080fd5b610059610054366004610184565b61009a565b60405190815260200160405180910390f35b61007e61007936600461019d565b6100bb565b005b61005961008e3660046101fb565b6101f495945050505050565b600081815481106100aa57600080fd5b600091825260209091200154905081565b6000548190156100ea5782600080815481106100d9576100d9610271565b60009182526020909120015561011d565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563018390555b604051631fe543e360e01b81526001600160a01b03821690631fe543e39061014c908790600090600401610287565b600060405180830381600087803b15801561016657600080fd5b505af115801561017a573d6000803e3d6000fd5b5050505050505050565b60006020828403121561019657600080fd5b5035919050565b6000806000606084860312156101b257600080fd5b833592506020840135915060408401356001600160a01b03811681146101d757600080fd5b809150509250925092565b803563ffffffff811681146101f657600080fd5b919050565b600080600080600060a0868803121561021357600080fd5b85359450602086013567ffffffffffffffff8116811461023257600080fd5b9350604086013561ffff8116811461024957600080fd5b9250610257606087016101e2565b9150610265608087016101e2565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b60006040820184835260206040818501528185548084526060860191508660005282600020935060005b818110156102cd578454835260019485019492840192016102b1565b509097965050505050505056fea264697066735822122074a4629c603d286b41806f341649a5404f85cf07d9f4022a209bd8498316502d64736f6c63430008110033";

type TestCoordinatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCoordinatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCoordinator__factory extends ContractFactory {
  constructor(...args: TestCoordinatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestCoordinator> {
    return super.deploy(overrides || {}) as Promise<TestCoordinator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestCoordinator {
    return super.attach(address) as TestCoordinator;
  }
  override connect(signer: Signer): TestCoordinator__factory {
    return super.connect(signer) as TestCoordinator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCoordinatorInterface {
    return new utils.Interface(_abi) as TestCoordinatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCoordinator {
    return new Contract(address, _abi, signerOrProvider) as TestCoordinator;
  }
}
